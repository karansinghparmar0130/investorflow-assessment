/*
 * Contact Management API
 *
 * This is a Contact Management API, developed as part of InvestorFlow technical assessment.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: karanparmar0130@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace InvestorFlow.ContactManagement.API.Models
{
    /// <summary>
    /// Contact Response Definition
    /// </summary>
    [DataContract]
    public partial class ContactResponse : IEquatable<ContactResponse>
    { 
        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [Required]

        [DataMember(Name="contactId")]
        public Guid? ContactId { get; set; }

        /// <summary>
        /// Gets or Sets FundId
        /// </summary>

        [DataMember(Name="fundId")]
        public Guid? FundId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="name")]
        public string? Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>

        [DataMember(Name="email")]
        public string? Email { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>

        [DataMember(Name="phoneNumber")]
        public string? PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactResponse {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  FundId: ").Append(FundId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContactResponse)obj);
        }

        /// <summary>
        /// Returns true if ContactResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactResponse? other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContactId == other.ContactId ||
                    ContactId != null &&
                    ContactId.Equals(other.ContactId)
                ) && 
                (
                    FundId == other.FundId ||
                    FundId != null &&
                    FundId.Equals(other.FundId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    PhoneNumber == other.PhoneNumber ||
                    PhoneNumber != null &&
                    PhoneNumber.Equals(other.PhoneNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContactId != null)
                    hashCode = hashCode * 59 + ContactId.GetHashCode();
                    if (FundId != null)
                    hashCode = hashCode * 59 + FundId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (PhoneNumber != null)
                    hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContactResponse left, ContactResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContactResponse left, ContactResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
