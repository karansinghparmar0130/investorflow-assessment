/*
 * Contact Management API
 *
 * This is a Contact Management API, developed as part of InvestorFlow technical assessment.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: karanparmar0130@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace InvestorFlow.ContactManagement.API.Models
{
    /// <summary>
    /// Fund Response
    /// </summary>
    [DataContract]
    public partial class FundResponse : List<ContactResponse>, IEquatable<FundResponse>
    { 
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FundResponse {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FundResponse)obj);
        }

        /// <summary>
        /// Returns true if FundResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of FundResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundResponse? other)
        {
            return !ReferenceEquals(null, other) && ReferenceEquals(this, other);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FundResponse left, FundResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FundResponse left, FundResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
