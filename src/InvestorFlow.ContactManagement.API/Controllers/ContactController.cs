/*
 * Contact Management API
 *
 * This is a Contact Management API, developed as part of InvestorFlow technical assessment.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: karanparmar0130@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.ComponentModel.DataAnnotations;
using Asp.Versioning;
using InvestorFlow.ContactManagement.API.Attributes;
using InvestorFlow.ContactManagement.API.Models;
using InvestorFlow.ContactManagement.Application.Interfaces;
using Microsoft.AspNetCore.Mvc;
using DomainContact = InvestorFlow.ContactManagement.Domain.Entities.Contact;

namespace InvestorFlow.ContactManagement.API.Controllers
{
    /// <summary>
    /// Contact Controller Definition
    /// </summary>
    [ApiController]
    [Route("/api/v{version:apiVersion}/contact")]
    [ApiVersion("1")]
    [ValidateModelState]
    public class ContactController(
        ILogger<ContactController> logger,
        IContactService contactService,
        IMapper<Contact, DomainContact> contactMapper,
        IMapper<DomainContact, ContactResponse> contactResponseMapper) : ControllerBase
    {
        /// <summary>
        /// Create a contact
        /// </summary>
        /// <remarks>Returns created contact</remarks>
        /// <param name="body">Create request</param>
        /// <response code="201">Successful operation</response>
        /// <response code="400">Invalid inputs</response>
        /// <response code="500">Server exception</response>
        [HttpPost]
        [MapToApiVersion("1")]
        public async Task<IActionResult> CreateContact(
            [FromBody] Contact body)
        {
            var contact = contactMapper.Map(body);
            var serviceResponse = await contactService.CreateContactAsync(contact);
            var contactResponse = contactResponseMapper.Map(serviceResponse);

            logger.LogInformation("Create contact completed");
            return CreatedAtAction("GetContact", new { contactId = contactResponse.ContactId }, contactResponse);
        }

        /// <summary>
        /// Update a contact
        /// </summary>
        /// <remarks>Returns updated contact</remarks>
        /// <param name="body">Update request</param>
        /// <param name="contactId">Id of contact</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid inputs</response>
        /// <response code="404">Contact not found</response>
        /// <response code="500">Server exception</response>
        [HttpPut("{contactId}")]
        [MapToApiVersion("1")]
        public async Task<IActionResult> UpdateContact(
            [FromBody] Contact body, 
            [FromRoute] [Required] Guid contactId)
        {
            var contact = contactMapper.Map(body);
            var serviceResponse = await contactService.UpdateContactAsync(contact, contactId);
            var contactResponse = contactResponseMapper.Map(serviceResponse);

            logger.LogInformation("Update contact completed");
            return Ok(contactResponse);
        }

        /// <summary>
        /// Delete a contact
        /// </summary>
        /// <remarks>Returns acknowledgement</remarks>
        /// <param name="contactId">Id of contact</param>
        /// <response code="204">Successful operation</response>
        /// <response code="400">Invalid Id supplied</response>
        /// <response code="404">Contact not found</response>
        /// <response code="500">Server exception</response>
        [HttpDelete("{contactId}")]
        [MapToApiVersion("1")]
        public async Task<IActionResult> DeleteContact(
            [FromRoute] [Required] Guid contactId)
        {
            await contactService.DeleteContactAsync(contactId);
            logger.LogInformation("Delete contact completed");
            return NoContent();
        }

        /// <summary>
        /// Find a contact
        /// </summary>
        /// <remarks>Returns a single contact</remarks>
        /// <param name="contactId">Id of contact</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid Id supplied</response>
        /// <response code="404">Contact not found</response>
        /// <response code="500">Server exception</response>
        [HttpGet("{contactId}")]
        [MapToApiVersion("1")]
        public async Task<IActionResult> GetContact(
            [FromRoute] [Required] Guid contactId)
        {
            var serviceResponse = await contactService.GetContactAsync(contactId);
            var contactResponse = contactResponseMapper.Map(serviceResponse);

            logger.LogInformation("Get contact completed");
            return Ok(contactResponse);
        }

        /// <summary>
        /// Assign contact to a fund
        /// </summary>
        /// <remarks>Returns updated contact</remarks>
        /// <param name="contactId">Id of contact</param>
        /// <param name="fundId">Id of fund</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid inputs</response>
        /// <response code="404">Contact/ Fund not found</response>
        /// <response code="500">Server exception</response>
        [HttpPut("{contactId}/assign-fund/{fundId}")]
        [MapToApiVersion("1")]
        public async Task<IActionResult> AssignFundToContact(
            [FromRoute] [Required] Guid contactId,
            [FromRoute] [Required] Guid fundId)
        {
            var serviceResponse = await contactService.AssignContactToFundAsync(contactId, fundId);
            var contactResponse = contactResponseMapper.Map(serviceResponse);

            logger.LogInformation("Assign contact to fund completed");
            return Ok(contactResponse);
        }

        /// <summary>
        /// Remove contact to a fund
        /// </summary>
        /// <remarks>Returns updated contact</remarks>
        /// <param name="contactId">Id of contact</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid inputs</response>
        /// <response code="404">Contact/ Fund not found</response>
        /// <response code="500">Server exception</response>
        [HttpPut("{contactId}/remove-fund")]
        [MapToApiVersion("1")]
        public async Task<IActionResult> RemoveFundFromContact(
            [FromRoute] [Required] Guid contactId)
        {
            var serviceResponse = await contactService.RemoveContactFromFundAsync(contactId);
            var contactResponse = contactResponseMapper.Map(serviceResponse);

            logger.LogInformation("Remove fund from contact completed");
            return Ok(contactResponse);
        }
    }
}
